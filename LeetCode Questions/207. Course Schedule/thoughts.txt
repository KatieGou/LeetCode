Topological sort.

1. Create a dict and put all courese into it and initialize they values to 0. 
2. Iterate prerequisites, update the values in the dict. The values indicate how many courses need to be taken ahead of the current course.
3. Check the dict:
  a. If all the courses need prerequisites, then they can't be finished (return False). Here I used built-in function all() to check whether all values are greater than 0.
  b. The courses whose value is 0 (meaning that there is no prerequisite) can be taken first. These courses are saved to a list can_takes.
4. Iterate can_takes and prerequisites, minus 1 from the value of the courses who need can_takes can their prerequisite.
5. Pop from dict where key is in can_takes.
6. Go to step 3.

New knowledge:

all(iterable):

The all() function returns True if all items in an iterable are true, otherwise it returns False.

If the iterable object is empty, the all() function also returns True.
